const ParityBit = require('./parity')
const { unot8, unsigned8, hex16, hex8, usum8 } = require('./utils')

const RegisterMap = {
  0b111: 'a',
  0b000: 'b',
  0b001: 'c',
  0b010: 'd',
  0b011: 'e',
  0b100: 'h',
  0b101: 'l'
}

const Register16Map = {
  0b00: 'bc',
  0b01: 'de',
  0b10: 'hl',
  0b11: 'sp'
}

const Register16Map2 = {
  0b00: 'bc',
  0b01: 'de',
  0b10: 'hl',
  0b11: 'af'
}

const RegisterMapHL = {
  0b100: 'h',
  0b101: 'l'
}

const Prefixes = {
  ix: 0xdd,
  iy: 0xfd
}

const f_c = 1
const f_n = 2
const f_pv = 4
const f_3 = 8
const f_h = 16
const f_5 = 32
const f_z = 64
const f_s = 128

const c_nz = 0b000
const c_z = 0b001
const c_nc = 0b010
const c_c = 0b011
const c_po = 0b100
const c_pe = 0b101
const c_p = 0b110
const c_m = 0b111

const ArgType = {
  Byte: 1,
  Word: 2,
  Offset: 3
}

const Conditions = {
  nz: c_nz,
  z: c_z,
  nc: c_nc,
  c: c_c,
  po: c_po,
  pe: c_pe,
  p: c_p,
  m: c_m
}

const MemoryMethods = [ 'read8', 'read16', 'write8', 'write16' ]

// Z80 constructor

const Z80 = function(memory, debug) {
  if (!(this instanceof Z80)) {
    throw 'Z80 is a constructor, use "new" keyword'
  }

  if (!memory) {
    throw 'Constructor should be called with a Memory instance as the first argument'
  }

  if (!memory.read8 || typeof memory.read8 !== 'function') {
    throw 'Memory instance should have read8 method'
  }
  if (!memory.write8 || typeof memory.write8 !== 'function') {
    throw 'Memory instance should have read8 method'
  }
  this.memory = memory

  this.read8 = (addr) => {
    this.tStates += 3
    let value = memory.read8(addr)
    this.debug(`Reading memory address 0x${hex16(addr)} = 0x${hex8(value)}`)
    return value
  }

  this.write8 = (addr, value) => {
    this.tStates += 3
    this.debug(`Writing to memory address 0x${hex16(addr)} = 0x${hex8(value)}`)
    memory.write8(addr, value)
  }

  this.read16 = (addr) => {
    return this.read8(addr) | (this.read8(addr + 1) << 8)
  }
  this.write16 = (addr, value) => {
    let high = (value & 0xff00) >> 8
    let low = value & 0xff
    this.write8(addr, low)
    this.write8(addr + 1, high)
  }

  this.tStates = 0
  this.debugMode = !!debug

  // Creating registers
  this.r1 = {}
  this.r2 = {}

  let bf0 = new ArrayBuffer(16)
  let bf1 = new ArrayBuffer(14)
  let bf2 = new ArrayBuffer(14)
  this.b0 = new Uint8Array(bf0)
  this.w0 = new Uint16Array(bf0)
  this.b1 = new Uint8Array(bf1)
  this.w1 = new Uint16Array(bf1)
  this.b2 = new Uint8Array(bf2)
  this.w2 = new Uint16Array(bf2)
  this._defineByteRegister('f', 0)
  this._defineByteRegister('a', 1)
  this._defineByteRegister('c', 2)
  this._defineByteRegister('b', 3)
  this._defineByteRegister('e', 4)
  this._defineByteRegister('d', 5)
  this._defineByteRegister('l', 6)
  this._defineByteRegister('h', 7)
  this._defineByteRegister('ixl', 8)
  this._defineByteRegister('ixh', 9)
  this._defineByteRegister('iyl', 10)
  this._defineByteRegister('iyh', 11)
  this._defineWordRegister('af', 0)
  this._defineWordRegister('bc', 1)
  this._defineWordRegister('de', 2)
  this._defineWordRegister('hl', 3)
  this._defineWordRegister('ix', 4)
  this._defineWordRegister('iy', 5)

  Object.defineProperty(this, 'sp', {
    get: () => {
      return this.w0[2]
    },
    set: (val) => {
      this.w0[2] = val
    }
  })
  // Alias
  Object.defineProperty(this.r1, 'sp', {
    get: () => {
      return this.w0[2]
    },
    set: (val) => {
      this.w0[2] = val
    }
  })
  Object.defineProperty(this, 'pc', {
    get: () => {
      return this.w0[0]
    },
    set: (val) => {
      this.w0[0] = val
    }
  })
  Object.defineProperty(this, 'r', {
    get: () => {
      return this.b0[2]
    },
    set: (val) => {
      this.b0[2] = val
    }
  })
  Object.defineProperty(this, 'i', {
    get: () => {
      return this.b0[3]
    },
    set: (val) => {
      this.b0[3] = val
    }
  })
}

Z80.prototype._defineByteRegister = function(name, position) {
  Object.defineProperty(this.r1, name, {
    get: () => {
      return this.b1[position]
    },
    set: (value) => {
      this.b1[position] = value
    }
  })
  Object.defineProperty(this.r2, name, {
    get: () => {
      return this.b2[position]
    },
    set: (value) => {
      this.b2[position] = value
    }
  })
}

Z80.prototype._defineWordRegister = function(name, position) {
  Object.defineProperty(this.r1, name, {
    get: () => {
      return this.w1[position]
    },
    set: (value) => {
      this.w1[position] = value
    }
  })
  Object.defineProperty(this.r2, name, {
    get: () => {
      return this.w2[position]
    },
    set: (value) => {
      this.w2[position] = value
    }
  })
}

Z80.prototype.dump = function() {
  console.log('=============================')
  console.log(`PC: ${hex16(this.pc)}     tStates: ${this.tStates}`)
  console.log(`SP: ${hex16(this.sp)}`)
  console.log('')
  console.log(`AF: ${hex16(this.r1.af)}         AF': ${hex16(this.r2.af)}`)
  console.log(`BC: ${hex16(this.r1.bc)}         BC': ${hex16(this.r2.bc)}`)
  console.log(`DE: ${hex16(this.r1.de)}         DE': ${hex16(this.r2.de)}`)
  console.log(`HL: ${hex16(this.r1.hl)}         HL': ${hex16(this.r2.hl)}`)
  console.log(`IX: ${hex16(this.r1.ix)}`)
  console.log(`IY: ${hex16(this.r1.iy)}`)
  console.log('')
  console.log(`I: ${hex8(this.i)}`)
  console.log(`R: ${hex8(this.r)}`)
  console.log('')
  let flags = []
  if (this.getFlag(f_c)) {
    flags.push('C')
  }
  if (this.getFlag(f_n)) {
    flags.push('N')
  }
  if (this.getFlag(f_pv)) {
    flags.push('PV')
  }
  if (this.getFlag(f_3)) {
    flags.push('3')
  }
  if (this.getFlag(f_h)) {
    flags.push('H')
  }
  if (this.getFlag(f_5)) {
    flags.push('5')
  }
  if (this.getFlag(f_z)) {
    flags.push('Z')
  }
  if (this.getFlag(f_s)) {
    flags.push('S')
  }
  console.log(`FLAGS: ${flags.join(' ')}`)
  console.log('=============================\n')
}

// Flag operations

Z80.prototype.setFlag = function(flag) {
  this.r1.f = this.r1.f | flag
}

Z80.prototype.resFlag = function(flag) {
  this.r1.f = this.r1.f & unot8(flag)
}

Z80.prototype.valFlag = function(flag, value) {
  value ? this.setFlag(flag) : this.resFlag(flag)
}

Z80.prototype.getFlag = function(flag) {
  return (this.r1.f & flag) !== 0
}

Z80.prototype.adjustFlags = function(value) {
  this.valFlag(f_5, (value & f_5) !== 0)
  this.valFlag(f_3, (value & f_3) !== 0)
}

Z80.prototype.adjustFlagSZP = function(value) {
  this.valFlag(f_s, (value & 0x80) !== 0)
  this.valFlag(f_z, value === 0)
  this.valFlag(f_pv, ParityBit[value])
}

Z80.prototype.adjustLogicFlag = function(flag_h) {
  this.valFlag(f_s, (this.r1.a & 0x80) !== 0)
  this.valFlag(f_z, this.r1.a === 0)
  this.valFlag(f_h, flag_h)
  this.valFlag(f_n, false)
  this.valFlag(f_c, false)
  this.valFlag(f_pv, ParityBit[this.r1.a])
  this.adjustFlags(this.r1.a)
}

Z80.prototype.condition = function(cond) {
  switch (cond) {
    case c_z:
      return this.getFlag(f_z)
    case c_nz:
      return !this.getFlag(f_z)
    case c_c:
      return this.getFlag(f_c)
    case c_nc:
      return !this.getFlag(f_c)
    case c_m:
      return this.getFlag(f_s)
    case c_p:
      return !this.getFlag(f_s)
    case c_pe:
      return this.getFlag(f_pv)
    case c_po:
      return !this.getFlag(f_pv)
    default:
      return true
  }
}

Z80.prototype.doPush = function(value) {
  this.sp -= 2
  this.write16(this.sp, value)
}

Z80.prototype.doPop = function(operandName) {
  if (operandName in this.r1) {
    this.r1[operandName] = this.read16(this.sp)
  } else {
    this[operandName] = this.read16(this.sp)
  }
  this.sp += 2
}

// R register
Z80.prototype.incr = function() {
  this.r = (this.r & 0x80) | ((this.r + 1) & 0x7f)
}

Z80.prototype.decr = function() {
  this.r = (this.r & 0x80) | ((this.r - 1) & 0x7f)
}

// Creating opcode tables
Z80.prototype.opcodeTable = new Array(256)
Z80.prototype.opcodeTableCB = new Array(256)
Z80.prototype.opcodeTableED = new Array(256)
Z80.prototype.opcodeTableFD = new Array(256)
Z80.prototype.opcodeTableDD = new Array(256)
Z80.prototype.opcodeTableDDCB = new Array(256)
Z80.prototype.opcodeTableFDCB = new Array(256)
Z80.prototype.opcodeTableDDCB.opcodeOffset = 1
Z80.prototype.opcodeTableFDCB.opcodeOffset = 1

// Creating cross-table links
Z80.prototype.opcodeTable[0xcb] = { nextTable: Z80.prototype.opcodeTableCB }
Z80.prototype.opcodeTable[0xed] = { nextTable: Z80.prototype.opcodeTableED }
Z80.prototype.opcodeTable[0xdd] = { nextTable: Z80.prototype.opcodeTableDD }
Z80.prototype.opcodeTable[0xfd] = { nextTable: Z80.prototype.opcodeTableFD }
Z80.prototype.opcodeTableDD[0xcb] = { nextTable: Z80.prototype.opcodeTableDDCB }
Z80.prototype.opcodeTableFD[0xcb] = { nextTable: Z80.prototype.opcodeTableFDCB }

Z80.prototype.disassemble = function(addr) {
  let codes = []

  if (typeof addr === 'undefined') {
    addr = this.pc
  }
  // disassemple uses memory own methods which don't affect cpu tStates
  let opCode = this.memory.read8(addr++)
  codes.push(opCode)

  let instr = this.opcodeTable[opCode]
  if (!instr) {
    return { dasm: 'Error disassembling ' + codes.map((c) => hex8(c)).join(' '), nextAddr: addr }
  }

  while ('nextTable' in instr) {
    let nextTable = instr.nextTable
    opCode = this.memory.read8(addr++)
    codes.push(opCode)

    instr = nextTable[opCode]
    if (!instr) {
      return { dasm: 'Error disassembling ' + codes.map((c) => hex8(c)).join(' '), nextAddr: addr }
    }
  }

  let { dasm, args } = instr
  let argNum = 0
  let arg
  args.forEach((argType) => {
    switch (argType) {
      case ArgType.Byte:
        arg = this.memory.read8(addr++)
        dasm = dasm.replace(`{${argNum++}}`, `$${hex8(arg)}`)
        break
      case ArgType.Offset:
        arg = this.memory.read8(addr++)
        dasm = dasm.replace(`{${argNum++}}`, `${arg}`)
        break
      case ArgType.Word:
        arg = this.memory.read8(addr) | (this.memory.read8(addr + 1) << 8)
        addr += 2
        dasm = dasm.replace(`{${argNum++}}`, `0x${hex16(arg)}`)
        break
    }
  })
  return { dasm: dasm, nextAddr: addr }
}

Z80.prototype.debug = function() {
  if (this.debugMode) {
    let data = [ 'CPU debug:' ].concat(Array.prototype.map.call(arguments, (i) => i))
    console.log.apply(console, data)
  }
}

Z80.prototype.execute = function() {
  let current = this.opcodeTable
  let opCode
  let offset = 0
  let operation
  let codes = []

  this.debug('execute() started, t =', this.tStates)
  while (true) {
    opCode = this.read8(this.pc + offset)
    codes.push(opCode)
    this.debug('memory read, t =', this.tStates)
    this.pc++
    this.tStates++
    this.debug('pc incremented, t =', this.tStates)
    this.incr()

    operation = current[opCode]
    if (!operation) {
      throw 'Instruction ' + codes.map((i) => hex8(i)).join(' ') + ' not declared'
    }
    if (operation.funcName) {
      if (!(operation.funcName in this)) {
        throw 'Instruction ' + codes.map((i) => hex8(i)).join(' ') + ' not implemented'
      }
      this.pc -= offset
      this.debug('Running ' + operation.funcName + '(), t =', this.tStates)
      this[operation.funcName].call(this)
      this.debug(operation.funcName + '() executed, t =', this.tStates)
      break
    } else {
      if (operation.nextTable) {
        current = operation.nextTable
        offset = current.opcodeOffset || 0
        if (offset > 0) {
          this.decr()
        }
      }
    }
  }
}

// Here comes all the CPU operations available
//
// Tables are filled dynamically in class compile time
//
// Implementations are made with a simple template engine and should
// be precompiled with a compile.js script

// LD r, r'
for (let dst in RegisterMap) {
  for (let src in RegisterMap) {
    let opCode = 0b01000000 | (dst << 3) | src
    let dstRegName = RegisterMap[dst]
    let srcRegName = RegisterMap[src]
    let opFuncName = `ld_${dstRegName}_${srcRegName}`
    let disasmString = `ld ${dstRegName}, ${srcRegName}`
    Z80.prototype.opcodeTable[opCode] = {
      funcName: opFuncName,
      dasm: disasmString,
      args: []
    }
    for (let pref in Prefixes) {
      let nsrcRegName = srcRegName === 'l' || srcRegName === 'h' ? pref + srcRegName : srcRegName
      let ndstRegName = dstRegName === 'l' || dstRegName === 'h' ? pref + dstRegName : dstRegName
      opFuncName = `ld_${ndstRegName}_${nsrcRegName}`
      disasmString = `ld ${ndstRegName}, ${nsrcRegName}`
      let table = Z80.prototype.opcodeTable[Prefixes[pref]].nextTable
      table[opCode] = {
        funcName: opFuncName,
        dasm: disasmString,
        args: []
      }
    }
  }
}

// #BEGIN ld_[a,b,c,d,e,h,l,ixh,ixl,iyh,iyl]_[a,b,c,d,e,h,l,ixh,ixl,iyh,iyl]
Z80.prototype.$0 = function() {
  this.r1.$1 = this.r1.$2
}

// #END

// LD r, n
for (let dst in RegisterMap) {
  let opCode = 0b00000110 | (dst << 3)
  let opFuncName = `ld_${RegisterMap[dst]}_n`
  let disasmString = `ld ${RegisterMap[dst]}, \{0\}`
  Z80.prototype[opFuncName] = null
  Z80.prototype.opcodeTable[opCode] = {
    funcName: opFuncName,
    dasm: disasmString,
    args: [ ArgType.Byte ]
  }
}

// #BEGIN ld_[a,b,c,d,e,h,l,ixh,ixl,iyh,iyl]_n
Z80.prototype.$0 = function() {
  this.r1.$1 = this.read8(this.pc++)
}

// #END

// LD r, (HL)
for (let dst in RegisterMap) {
  let opCode = 0b01000110 | (dst << 3)
  let opFuncName = `ld_${RegisterMap[dst]}__hl_`
  let disasmString = `ld ${RegisterMap[dst]}, (hl)`
  Z80.prototype.opcodeTable[opCode] = { funcName: opFuncName, tStates: 7, dasm: disasmString, args: [] }
}

// #BEGIN ld[a,b,c,d,e,h,l]__hl_
Z80.prototype.$0 = function() {
  this.r1.$1 = this.read8(this.r1.hl)
}

// #END

// LD (HL), r
for (let src in RegisterMap) {
  let opCode = 0b01110000 | src
  let opFuncName = `ld__hl__${RegisterMap[src]}`
  let disasmString = `ld (hl), ${RegisterMap[src]}`
  Z80.prototype.opcodeTable[opCode] = { funcName: opFuncName, tStates: 7, dasm: disasmString, args: [] }
}

// #BEGIN ld__hl__[a,b,c,d,e,h,l]
Z80.prototype.$0 = function() {
  this.write8(this.r1.hl, this.r1.$1)
}

// #END

// LD (HL), n
Z80.prototype.opcodeTable[0b00110110] = {
  funcName: 'ld__hl__n',
  dasm: 'ld (hl), {0}',
  args: [ ArgType.Byte ]
}

Z80.prototype.ld__hl__n = function() {
  this.write8(this.r1.hl, this.read8(this.pc++))
}

// LD A, (BC)
Z80.prototype.opcodeTable[0b00001010] = { funcName: 'ld_a__bc_', tStates: 7, dasm: 'ld a, (bc)', args: [] }
// LD A, (DE)
Z80.prototype.opcodeTable[0b00011010] = { funcName: 'ld_a__de_', tStates: 7, dasm: 'ld a, (de)', args: [] }

// #BEGIN ld_a__[bc,de]_
Z80.prototype.$0 = function() {
  this.r1.a = this.read8(this.r1.$1)
}

// #END

// LD (BC), A
Z80.prototype.opcodeTable[0b00000010] = { funcName: 'ld__bc__a', tStates: 7, dasm: 'ld (bc), a', args: [] }
// LD (DE), A
Z80.prototype.opcodeTable[0b00010010] = { funcName: 'ld__de__a', tStates: 7, dasm: 'ld (de), a', args: [] }

// #BEGIN ld__[bc,de]__a
Z80.prototype.$0 = function() {
  this.write8(this.r1.$1, this.r1.a)
}

// #END

// LD A, (nn)
Z80.prototype.opcodeTable[0b00111010] = {
  funcName: 'ld_a__nn_',
  dasm: 'ld a, ({0})',
  args: [ ArgType.Word ]
}

Z80.prototype.ld_a__nn_ = function() {
  this.r1.a = this.read8(this.read16(this.pc))
  this.pc += 2
}

// LD (nn), A
Z80.prototype.opcodeTable[0b00110010] = {
  funcName: 'ld__nn__a',
  dasm: 'ld ({0}), a',
  args: [ ArgType.Word ]
}

Z80.prototype.ld__nn__a = function() {
  this.write8(this.read16(this.pc), this.r1.a)
  this.pc += 2
}

// LD A, I
Z80.prototype.opcodeTableED[0b01010111] = { funcName: 'ld_a_i', tStates: 9, dasm: 'ld a, i', args: [] }
// LD A, R
Z80.prototype.opcodeTableED[0b01011111] = { funcName: 'ld_a_r', tStates: 9, dasm: 'ld a, r', args: [] }

// #BEGIN ld_a_[i,r]
Z80.prototype.$0 = function() {
  this.tStates++
  this.r1.a = this.$1
  this.adjustFlags(this.r1.a)
  this.resFlag(f_h | f_n)
  this.valFlag(f_pv, this.iff2)
  this.valFlag(f_s, (this.r1.a & 0x80) !== 0)
  this.valFlag(f_z, this.r1.a === 0)
}

// #END

// LD I, A
Z80.prototype.opcodeTableED[0b01000111] = { funcName: 'ld_i_a', tStates: 9, dasm: 'ld i, a', args: [] }
// LD R, A
Z80.prototype.opcodeTableED[0b01001111] = { funcName: 'ld_r_a', tStates: 9, dasm: 'ld r, a', args: [] }

// #BEGIN ld_[i,r]_a
Z80.prototype.$0 = function() {
  this.tStates++
  this.$1 = this.r1.a
}

// #END

// LD r, (IX/IY+d)
for (let dst in RegisterMap) {
  let opCode = 0b01000110 | (dst << 3)
  for (let iReg in Prefixes) {
    let opFuncName = `ld_${RegisterMap[dst]}__${iReg}_d_`
    let disasmString = `ld ${RegisterMap[dst]}, (${iReg}+{0})`
    Z80.prototype.opcodeTable[Prefixes[iReg]][opCode] = {
      funcName: opFuncName,
      dasm: disasmString,
      args: [ ArgType.Byte ]
    }
  }
}

// #BEGIN ld_[a,b,c,d,e,h,l]__[ix,iy]_d_
Z80.prototype.$0 = function() {
  let offset = unsigned8(this.read8(this.pc++))
  this.r1.$1 = this.read8(this.$2 + offset)
}

// #END

// LD (IX/IY+d), r
for (let src in RegisterMap) {
  let opCode = 0b01110000 | src
  for (let iReg in Prefixes) {
    let opFuncName = `ld__${iReg}_d__${RegisterMap[src]}`
    let disasmString = `ld (${iReg}+{0}), ${RegisterMap[src]}`
    Z80.prototype.opcodeTable[Prefixes[iReg]][opCode] = {
      funcName: opFuncName,
      dasm: disasmString,
      args: [ ArgType.Byte ]
    }
  }
}

// #BEGIN ld_[a,b,c,d,e,h,l]__[ix,iy]_d_
Z80.prototype.$0 = function() {
  let offset = unsigned8(this.read8(this.pc++))
  this.write8(this.$2 + offset, this.r1.$1)
}

// #END

// LD (IX/IY+d), n
for (let iReg in Prefixes) {
  let opFuncName = `ld__${iReg}_d__n`
  let disasmString = `ld (${iReg}+{0}), {1}`
  Z80.prototype.opcodeTable[Prefixes[iReg]][0b00110110] = {
    funcName: opFuncName,
    dasm: disasmString,
    args: [ ArgType.Word ]
  }
}

// #BEGIN ld__[ix,iy]_d__n
Z80.prototype.$0 = function() {
  let offset = unsigned8(this.read8(this.pc++))
  let n = this.read8(this.pc++)
  this.write8(this.$1 + offset, n)
}

// #END

// LD dd, nn
for (let rCode in Register16Map) {
  let opCode = 0b00000001 | (rCode << 4)
  let opFuncName = `ld_${Register16Map[rCode]}_nn`
  let disasmString = `ld ${Register16Map[rCode]}, {0}`
  Z80.prototype.opcodeTable[opCode] = {
    funcName: opFuncName,
    dasm: disasmString,
    args: [ ArgType.Word ]
  }
}

for (let regName in Prefixes) {
  let code = Prefixes[regName]
  Z80.prototype.opcodeTable[code].nextTable[0b00100001] = {
    funcName: `ld_${regName}_nn`,
    dasm: `ld ${regName}, {0}`,
    args: [ ArgType.Word ]
  }
}

// #BEGIN ld_[bc,de,hl,sp,ix,iy]_nn
Z80.prototype.$0 = function() {
  this.r1.$1 = this.read16(this.pc)
  this.pc += 2
}

// #END

// LD HL, (nn)
Z80.prototype.opcodeTable[0x2a] = {
  funcName: 'ld_hl__nn_',
  dasm: `ld hl, ({0})`,
  args: [ ArgType.Word ]
}

// LD IX/IY, (nn)
for (let pref in Prefixes) {
  Z80.prototype.opcodeTable[Prefixes[pref]].nextTable[0x2a] = {
    funcName: `ld_${pref}__nn_`,
    dasm: `ld ${pref}, ({0})`,
    args: [ ArgType.Word ]
  }
}

// LD dd, (nn)
for (let rCode in Register16Map) {
  let opCode = 0b01001011 | (rCode << 4)
  let opFuncName = `ld_${Register16Map[rCode]}__nn_`
  let disasmString = `ld ${Register16Map[rCode]}, ({0})`
  Z80.prototype.opcodeTableED[opCode] = {
    funcName: opFuncName,
    dasm: disasmString,
    args: [ ArgType.Word ]
  }
}

// #BEGIN ld_[ix,iy,bc,de,hl,sp]__nn_
Z80.prototype.$0 = function() {
  this.r1.$1 = this.read16(this.read16(this.pc))
  this.pc += 2
}

// #END

// LD (nn), HL
Z80.prototype.opcodeTable[0x22] = {
  funcName: 'ld__nn__hl',
  dasm: `ld ({0}), hl`,
  args: [ ArgType.Word ]
}

// LD (nn), IX/IY
for (let pref in Prefixes) {
  Z80.prototype.opcodeTable[Prefixes[pref]].nextTable[0x22] = {
    funcName: `ld__nn__${pref}`,
    dasm: `ld ({0}), ${pref}`,
    args: [ ArgType.Word ]
  }
}

// LD (nn), dd
for (let rCode in Register16Map) {
  let opCode = 0b01000011 | (rCode << 4)
  let opFuncName = `ld__nn__${Register16Map[rCode]}`
  let disasmString = `ld ({0}), ${Register16Map[rCode]}`
  Z80.prototype.opcodeTableED[opCode] = {
    funcName: opFuncName,
    dasm: disasmString,
    args: [ ArgType.Word ]
  }
}

// #BEGIN ld__nn__[ix,iy,bc,de,hl,sp]
Z80.prototype.$0 = function() {
  let addr = this.read16(this.pc)
  this.pc += 2
  this.write16(addr, this.r1.$1)
}

// #END

// LD SP, HL/IX/IY
Z80.prototype.opcodeTable[0xf9] = { funcName: 'ld_sp_hl', dasm: 'ld sp, hl', args: [] }
Z80.prototype.ld_sp_hl = function() {
  this.tStates += 2
  this.sp = this.r1.hl
}

Z80.prototype.opcodeTableDD[0xf9] = { funcName: 'ld_sp_ix', dasm: 'ld sp, ix', args: [] }
Z80.prototype.ld_sp_ix = function() {
  this.tStates += 2
  this.sp = this.r1.ix
}

Z80.prototype.opcodeTableFD[0xf9] = { funcName: 'ld_sp_iy', dasm: 'ld sp, iy', args: [] }
Z80.prototype.ld_sp_iy = function() {
  this.tStates += 2
  this.sp = this.r1.iy
}

// PUSH qq
for (let rCode in Register16Map2) {
  let opCode = 0b11000101 | (rCode << 4)
  let opFuncName = `push_${Register16Map2[rCode]}`
  let disasmString = `push ${Register16Map2[rCode]}`
  Z80.prototype.opcodeTable[opCode] = {
    funcName: opFuncName,
    dasm: disasmString,
    args: []
  }
}

for (let pref in Prefixes) {
  let opFuncName = `push_${pref}`
  let disasmString = `push ${pref}`
  Z80.prototype.opcodeTable[Prefixes[pref]].nextTable[0xe5] = {
    funcName: opFuncName,
    dasm: disasmString,
    args: []
  }
}

// #BEGIN push_[af,bc,de,hl,ix,iy]
Z80.prototype.$0 = function() {
  this.doPush(this.r1.$1)
}

// #END

// POP qq
for (let rCode in Register16Map2) {
  let opCode = 0b11000001 | (rCode << 4)
  let opFuncName = `pop_${Register16Map2[rCode]}`
  let disasmString = `pop ${Register16Map2[rCode]}`
  Z80.prototype.opcodeTable[opCode] = {
    funcName: opFuncName,
    dasm: disasmString,
    args: []
  }
}

for (let pref in Prefixes) {
  let opFuncName = `pop_${pref}`
  let disasmString = `pop ${pref}`
  Z80.prototype.opcodeTable[Prefixes[pref]].nextTable[0xe1] = {
    funcName: opFuncName,
    dasm: disasmString,
    args: []
  }
}

// #BEGIN pop_[af,bc,de,hl,ix,iy]
Z80.prototype.$0 = function() {
  this.doPop('$1')
}

// #END

// NOP
Z80.prototype.opcodeTable[0x00] = {
  funcName: 'nop',
  dasm: 'nop',
  args: []
}

Z80.prototype.nop = function() {
  // nop
}

// EX DE, HL
Z80.prototype.opcodeTable[0xeb] = { funcName: 'ex_de_hl', dasm: 'ex de, hl', args: [], tStates: 4 }
Z80.prototype.ex_de_hl = function() {
  let _t = this.r1.de
  this.r1.de = this.r1.hl
  this.r1.hl = _t
}

// EX AF, AF'
Z80.prototype.opcodeTable[0x08] = { funcName: 'ex_af_af_', dasm: "ex af, af'", args: [], tStates: 4 }
Z80.prototype.ex_af_af_ = function() {
  let _t = this.r1.af
  this.r1.af = this.r2.af
  this.r2.af = _t
}

// EXX
Z80.prototype.opcodeTable[0xd9] = { funcName: 'exx', dasm: 'exx', args: [], tStates: 4 }
Z80.prototype.exx = function() {
  let _t = this.r1.bc
  this.r1.bc = this.r2.bc
  this.r2.bc = _t
  _t = this.r1.de
  this.r1.de = this.r2.de
  this.r2.de = _t
  _t = this.r1.hl
  this.r1.hl = this.r2.hl
  this.r2.hl = _t
}

// EX (SP), HL/IX/IY
Z80.prototype.opcodeTable[0xe3] = { funcName: 'ex__sp__hl', dasm: 'ex (sp), hl', args: [], tStates: 19 }
for (let pref in Prefixes) {
  Z80.prototype.opcodeTable[Prefixes[pref]].nextTable[0xe3] = {
    funcName: `ex__sp__${pref}`,
    dasm: `ex (sp), ${pref}`,
    args: [],
    tStates: 19
  }
}

// #BEGIN ex__sp__[hl,ix,iy]
Z80.prototype.$0 = function() {
  let _t = this.r1.$1
  this.r1.$1 = this.read16(this.sp)
  this.write16(this.sp, _t)
}

// #END

// LDI
Z80.prototype.opcodeTableED[0xa0] = { funcName: 'ldi', dasm: 'ldi', args: [], tStates: 16 }
Z80.prototype.ldi = function() {
  this.tStates += 2
  let val = this.read8(this.r1.hl++)
  this.write8(this.r1.de++, val)
  this.r1.bc--
  let sum = usum8(this.r1.a, val)
  this.valFlag(f_5, (sum & 0x02) !== 0)
  this.valFlag(f_3, (sum & f_3) !== 0)
  this.resFlag(f_h | f_n)
  this.valFlag(f_pv, this.r1.bc !== 0)
}

// LDIR
Z80.prototype.opcodeTableED[0xb0] = { funcName: 'ldir', dasm: 'ldir', args: [], tStates: 16 }
Z80.prototype.ldir = function() {
  this.ldi()
  if (this.r1.bc !== 0) {
    this.tStates += 5
    this.pc -= 2
  }
}

// JP nn
Z80.prototype.opcodeTable[0xc3] = {
  funcName: 'jp_nn',
  dasm: 'jp {0}',
  args: [ ArgType.Word ]
}

Z80.prototype.jp_nn = function() {
  this.pc = this.read16(this.pc)
}

// JP cc, nn
for (let cond in Conditions) {
  let opCode = 0b11000010 | (Conditions[cond] << 3)
  let opFuncName = `jp_${cond}_nn`
  let disasmString = `jp_${cond}_{0}`
  Z80.prototype.opcodeTable[opCode] = {
    funcName: opFuncName,
    dasm: disasmString,
    args: [ ArgType.Word ]
  }
}

// #BEGIN jp_[c,nc,z,nz,pe,po,p,m]_nn
Z80.prototype.$0 = function() {
  // no matter if the condition is true we spend 6 tstates to read the addr
  let addr = this.read16(this.pc)
  if (this.condition(c_$1)) {
    this.pc = addr
  } else {
    this.pc += 2
  }
}

// #END

// RST p
for (let p = 0; p < 8; p++) {
  let vector = p << 3
  let opCode = 0b11000111 | vector
  let opFuncName = `rst_${hex8(vector)}h`
  let disasmString = `rst ${hex8(vector)}h`
  Z80.prototype.opcodeTable[opCode] = {
    funcName: opFuncName,
    dasm: disasmString,
    args: []
  }
}

// #BEGIN rst_[00,08,10,18,20,28,30,38]h
// Z80.prototype.$0 = function() {
//   this.doPush(this.pc)
//   this.pc = 0x$1
// }

// #END
module.exports = Z80
